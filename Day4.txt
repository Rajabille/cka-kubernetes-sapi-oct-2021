Emptydir
https://www.devopsschool.com/blog/kubernetes-volume-emptydir-explained-with-examples/

Hostpath
https://www.devopsschool.com/blog/kubernetes-volume-hostpath-explained-with-examples/

nfs

/var/lib/kubelet/pods/{podid}/volumes/kubernetes.io~empty-dir/ on the given node where your pod is running.

apiVersion: v1
kind: Pod
metadata:
  name: test-pd
spec:
  containers:
  - image: scmgalaxy/nginx-devopsschoolv1
    name: test-container
    volumeMounts:
    - mountPath: /cache
      name: cache-volume
  volumes:
  - name: cache-volume
    emptyDir: {}


apiVersion: v1
kind: Pod
metadata:
  name: test-pd
spec:
  containers:
  - image: scmgalaxy/nginx-devopsschoolv1
    name: test-container
    volumeMounts:
    - mountPath: /test-pd
      name: test-volume
  volumes:
  - name: test-volume
    hostPath:
      path: /data
      type: DirectoryOrCreate

=======================================
STATIC ->
PROVISIONING | BINDING | USING
PV ---> 	PVC ---> BINDING (ATTACHing + mOUNT) 
----------
hOSTPATH
https://www.devopsschool.com/blog/persistentvolume-persistentvolumeclaim-volumes-using-hostpath/

kind: PersistentVolume
apiVersion: v1
metadata:
  name: rajesh-1
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/devopsschool"

kind: PersistentVolume
apiVersion: v1
metadata:
  name: rajesh-3
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/devopsschool"




apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rajesh-pvc-1
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi


apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rajesh-pvc-2
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi


kind: Pod
apiVersion: v1
metadata:
  name: task-pv-pod
spec:
  containers:
    - name: task-pv-container
      image: scmgalaxy/nginx-devopsschoolv1
      ports:
        - containerPort: 80
          name: "http-server"
      volumeMounts:
        - mountPath: "/usr/share/nginx/html"
          name: task-pv-storage1
  volumes:
    - name: task-pv-storage1
      persistentVolumeClaim:
        claimName: rajesh-pvc-2
    - name: task-pv-storage2
      persistentVolumeClaim:
        claimName: rajesh-pvc-1



1004  vi empty.yaml
 1005  kubectl get pods -n=rajesh
 1006  kubectl apply -f empty.yaml -n=rajesh
 1007  kubectl get pods -n=rajesh
 1008  clear
 1009  ls
 1010  kubectl get pods -n=rajesh
 1011  kubectl exec test-pd ls /cache
 1012  kubectl exec test-pd ls /cache -n=rajesh
 1013  kubectl exec test-pd touch /cache/rajesh.txt -n=rajesh
 1014  kubectl get pods -n=rajesh -o wide
 1015  clear
 1016  kubectl get pods -n=rajesh -o wide
 1017  kubectl delete pod test-pd -n=rajesh
 1018  kubectl explain pod.spec.volumes
 1019  kubectl explain pod.spec.volumes.hostPath
 1020  kubectl explain pod.spec.volumes.hostPath.type
 1021  clear
 1022  ls
 1023  vi hostpath.yaml
 1024  kubectl apply -f hostpath.yaml
 1025  kubectl delete -f hostpath.yaml
 1026  kubectl apply -f hostpath.yaml -n=rajesh
 1027  kubectl get pods -n=rajesh
 1028  kubectl exec test-pd ls /test-pd
 1029  kubectl exec test-pd ls /test-pd -n=rajesh
 1030  kubectl exec test-pd touch /test-pd/raju.txt -n=rajesh
 1031  kubectl exec test-pd ls /test-pd -n=rajesh
 1032  kubectl get pods -n=rajesh -o wide
 1033  clear
 1034  ls
 1035  kubectl delete -f hostpath.yaml -n=rajesh
 1036  kubectl apply -f hostpath.yaml -n=rajesh
 1037  kubectl get pods -n=rajesh
 1038  kubectl get pods -n=rajesh -o wide
 1039  kubectl get nodes
 1040  clear
 1041  s
 1042  ls
 1043  vi pv1.yaml
 1044  vi pv2.yaml
 1045  kubectl get pv
 1046  kubectl apply pv1.yaml
 1047  kubectl apply -f pv1.yaml
 1048  kubectl apply -f pv2.yaml
 1049  kubectl get pv
 1050  clear
 1051  kubectl get ovc
 1052  kubectl get pvc
 1053  kubectl get pvc -n=rajesh
 1054  vi pvc1.yaml
 1055  kubectl apply -f pvc1.yaml -n=rajesh
 1056  kubectl get pvc -n=rajesh
 1057  kubectl get pv
 1058  kubectl describe pvc rajesh-pvc-1 -n=rajesh
 1059  clear
 1060  ls
 1061  clear
 1062  ls
 1063  vi pvc2.yaml
 1064  kubectl apply pvc2.yaml -n=rajesh
 1065  kubectl apply -f pvc2.yaml -n=rajesh
 1066  kubectl get pvc -n=rajesh
 1067  kubectl get pv
 1068  vi pv3.yaml
 1069  kubectl apply -f pv3.yaml
 1070  kubectl get pv
 1071  kubectl get pvc -n=rajesh
 1072  kubectl get pvc -n=rajesh;kubectl get pv
 1073  clear
 1074  ls
 1075  vi lastpv.yaml
 1076  kubectl apply -f lastpv.yaml -n=rajesh
 1077  kubectl get pods -n=rajesh
 1078  kubectl exec task-pv-pod ls /usr/share/nginx/html -n=rajesh
 1079  kubectl get pods -n=rajesh -o wide
 1080  kubectl exec task-pv-pod ls /usr/share/nginx/html/ramukaka.txt -n=rajesh
 1081  kubectl exec task-pv-pod touch /usr/share/nginx/html/ramukaka.txt -n=rajesh
 1082  kubectl exec task-pv-pod ls /usr/share/nginx/html -n=rajesh
 1083  history


13.234.10.50	172.31.36.218
52.66.224.111	172.31.44.228
3.110.50.205	172.31.12.231.
13.234.66.116	172.31.9.75
======================================================
Step 1- Setup NFS Server.
https://www.devopsschool.com/blog/setup-nfs-server-and-use-inside-a-kubernetes-pods-in-rhel-centos7/

Step 2 - Kubernetes PersistentVolume and PersistentVolumeClaim using NFS volume types
https://www.devopsschool.com/blog/kubernetes-persistentvolume-and-persistentvolumeclaim-using-nfs-volume-types/

ConfigMap
https://www.devopsschool.com/blog/kubernetes-configmap-explained-using-example/

Secret
https://www.devopsschool.com/blog/explained-kubernetes-secret-with-example/

StorageClass
https://kubernetes.io/docs/concepts/storage/storage-classes/

USER --> POD --> pVC ---> PV (IT WOULD LOOK INTO POOL OF PV) = STATIC


USER --> POD --> pVC ---> STORAGE CLASS -> PV = DYNAMIC


Understanding Authentication & Authorization in kubernetes
===============================================================
https://www.devopsschool.com/blog/understanding-authentication-authorization-in-kubernetes/


Authentication


 clusterrole         Create a cluster role
  clusterrolebinding  Create a cluster role binding for a particular cluster role
  role                Create a role with single rule
  rolebinding         Create a role binding for a particular role or cluster role
  serviceaccount      Create a service account with the specified name
 
 certificatesigningrequests

 1183  kubectl get csr
 1184  kubectl certificate -h
 1185  kubectl certificate approve -h
 1186  kubectl certificate deny -h


kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: office
  name: deployment-manager
rules:
- apiGroups: ["", "extensions", "apps"]
  resources: ["deployments", "replicasets", "pods"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"] # You can also use ["*"]


kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: deployment-manager-binding
  namespace: office
subjects:
- kind: User
  name: employee
  apiGroup: ""
roleRef:
  kind: Role
  name: deployment-manager
  apiGroup: ""



- kind: User
  name: employee
  apiGroup: ""

- kind: ServiceAccount
  name: build
  apiGroup: "rbac.authorization.k8s.io"

- kind: Group
  name: bitnai
  apiGroup: ""


 1142  ls
 1143  openssl genrsa -out employee.key 2048
 1144  ls
 1145  more employee.key
 1146  clear
 1147  ls
 1148  openssl req -new -key employee.key -out employee.csr -subj "/CN=employee/O=bitnami"
 1149  kubectl explain csr
 1150  clear
 1151  kubectl create -h
 1152  clear
 1153  kubectl
 1154  kubectl api-resources
 1155  c
 1156  clear
 1157  ls
 1158  openssl x509 -req -in employee.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out employee.crt -days 500
 1159  sudo openssl x509 -req -in employee.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out employee.crt -days 500
 1160  ls
 1161  clear
 1162  kubectl config view
 1163  kubectl config -h
 1164  clear
 1165  kubectl config set-credentials employee --client-certificate=/root/employee.crt  --client-key=/root/employee.key
 1166  kubectl config view
 1167  clear
 1168  kubectl config set-context employee-context --cluster=kubernetes --namespace=office --user=employee
 1169  kubectl config view
 1170  clear
 1171  kubectl -h
 1172  clear
 1173  kubectl
 1174  clear
 1175  kubectl options
 1176  cleclear
 1177  clear
 1178  kubectl create namespace office
 1179  kubectl --context=employee-context get pods
 1180  pwd
 1181  vi $HOME/.kube/config
 1182  kubectl --context=employee-context get pods
 1183  kubectl get csr
 1184  kubectl certificate -h
 1185  kubectl certificate approve -h
 1186  kubectl certificate deny -h
 1187  clear
 1188  history
 1189  clear
 1190  kubectl
 1191  clear
 1192  kubectl api-resources
 1193  clear
 1194  kubectl create -h
 1195  clear
 1196  kubectl create serviceaccount -h
 1197  clear
 1198  ls
 1199  kubectl get sa
 1200  kubectl get sa -n=rajesh
 1201  kubectl get sa -n=raja
 1202  clear
 1203  ls
 1204  vi role.yaml
 1205  vi rb.yaml
 1206  kubectl explain rolebinding.subjects.apiGroup
 1207  kubectl api-resources
 1208  kubectl explain rolebinding.subjects.apiGroup
 1209  clear
 1210  ls
 1211  kubectl apply -f rb.yaml
 1212  kubectl api-resources
 1213  clear
 1214  ls
 1215  vi rb.yaml
 1216  vi role.yaml
 1217  vi rb.yaml
 1218  kubectl apply -f role.yaml
 1219  kubectl apply -f rb
 1220  kubectl apply -f rb.yaml
 1221  kubectl get roles
 1222  kubectl get roles -n=office
 1223  kubectl get rolebinding -n=office
 1224  clear
 1225  kubectl --context=employee-context run nginx --image=nginx
 1226  kubectl get pods -n=officew
 1227  kubectl get pods -n=office
 1228  kubectl get deploy -n=office
 1229  kubectl create -f
 1230  kubectl create -h
 1231  clear
 1232  kubectl --context=employee-context run nginx --image=nginx
 1233  kubectl get pods -n=office
 1234  kubectl run -h
 1235  cleare
 1236  clear
 1237  ls
 1238  kubectl --context=employee-context get pods
 1239  kubectl --context=employee-context get svc













Assignment
==============================================
Lab of NFS
==============================================
- Why we have kube-root-ca.crt configmap in each namespaces of kubernetes clustor?
[centos@ip-172-31-9-75 rajesh]$ kubectl get cm
NAME               DATA   AGE
kube-root-ca.crt   1      2d22h
[centos@ip-172-31-9-75 rajesh]$ kubectl get cm -n=rajesh
NAME               DATA   AGE
kube-root-ca.crt   1      2d
[centos@ip-172-31-9-75 rajesh]$
==============================================
- Why we have default-token-hbrcq secret in each namespaces of kubernetes clustor?
[centos@ip-172-31-9-75 rajesh]$ kubectl get secret
NAME                  TYPE                                  DATA   AGE
default-token-hbrcq   kubernetes.io/service-account-token   3      2d22h
[centos@ip-172-31-9-75 rajesh]$ kubectl get secret -n=rajesh
NAME                  TYPE                                  DATA   AGE
default-token-tqmbk   kubernetes.io/service-account-token   3      2d1h
mysecret              Opaque                                2      11s
[centos@ip-172-31-9-75 rajesh]$
==============================================
- Why we have default serviceaccount in each namespaces of kubernetes clustor?
[centos@ip-172-31-9-75 rajesh]$ kubectl get sa
NAME      SECRETS   AGE
default   1         3d
[centos@ip-172-31-9-75 rajesh]$ kubectl get sa -n=rajesh
NAME      SECRETS   AGE
default   1         2d2h
[centos@ip-172-31-9-75 rajesh]$ kubectl get sa -n=raja
NAME      SECRETS   AGE
default   1         30h
[centos@ip-172-31-9-75 rajesh]$












